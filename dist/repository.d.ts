import { Connector, DatabaseRow, PaginationInterface, RepositoryInterface } from "sdz-agent-types";
export default class Repository implements RepositoryInterface {
    private connector;
    constructor(connector: Connector);
    getTest(pagination: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getTestQuery(): Promise<string>;
    countTest(pagination?: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getClients(pagination: PaginationInterface, type: string): Promise<DatabaseRow[]>;
    getClientsQueryTotal(): Promise<string>;
    getClientsQueryPartial(): Promise<string>;
    countClients(pagination?: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getAddress(pagination: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    countAddress(pagination?: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getAddressQuery(): Promise<string>;
    getPropertyQuery(): Promise<string>;
    countProperty(pagination?: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getProperty(pagination: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getItemQuery(): Promise<string>;
    countItem(pagination?: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getItem(pagination: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getItemBrandingQuery(): Promise<string>;
    countItemBranding(pagination?: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getItemBranding(pagination: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getItemGroupQuery(): Promise<string>;
    countItemGroup(pagination?: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getItemGroup(pagination: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getRequest(pagination: PaginationInterface, type: string): Promise<DatabaseRow[]>;
    getRequestQueryTotal(): Promise<string>;
    getRequestQueryPartial(): Promise<string>;
    countRequest(pagination?: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getRequestItemQuery(): Promise<string>;
    countRequestItem(pagination?: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getRequestItem(pagination: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getInvoicesQuery(): Promise<string>;
    countInvoices(pagination?: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getInvoices(pagination: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getInvoicesItem(pagination: PaginationInterface, type: string): Promise<DatabaseRow[]>;
    getInvoicesItemQueryTotal(): Promise<string>;
    getInvoicesItemQueryPartial(): Promise<string>;
    countInvoicesItem(pagination?: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getPaymentTypeQuery(): Promise<string>;
    countPaymentType(pagination?: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getPaymentType(pagination: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getProviderQuery(): Promise<string>;
    countProvider(pagination?: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getProvider(pagination: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getAccountPay(pagination: PaginationInterface, type: string): Promise<DatabaseRow[]>;
    getAccountPayQueryTotal(): Promise<string>;
    getAccountPayQueryPartial(): Promise<string>;
    countAccountPay(pagination?: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getAccountReceivable(pagination: PaginationInterface, type: string): Promise<DatabaseRow[]>;
    getAccountReceivableQueryTotal(): Promise<string>;
    getAccountReceivableQueryPartial(): Promise<string>;
    countAccountReceivable(pagination?: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getVendorQuery(): Promise<string>;
    countVendor(pagination?: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getVendor(pagination: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getEmployeeQuery(): Promise<string>;
    countEmployee(pagination?: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getEmployee(pagination: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getInventoryQuery(): Promise<string>;
    countInventory(pagination?: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
    getInventory(pagination: PaginationInterface, type?: string): Promise<DatabaseRow[]>;
}
